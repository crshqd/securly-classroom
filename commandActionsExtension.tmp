// Extension specific actions

async function actionCloseTab(message) {
  const tabId = message["tabId"];
  const requestType = message["requestType"];
  const userId = message["userId"];
  closeTab(tabId).then(() => {
    router.sendCommand({
      response: requestType,
      tabId: tabId,
      userId: userId,
      isClosed: true
    });
  });
}

async function actionFocusTab(message) {
  const tabId = message["tabId"];
  try {
    await focusTab(tabId);
    router.sendCommand({
      response: message["requestType"],
      tabId: tabId,
      userId: message["userId"]
    });
  } catch (error) {
    console.log("Cannot focus tab: " + error);
  }
}

async function actionChatMessage(message) {
  config.chatMessages.push(message["chatMessage"]);
  config.hasUnreadChatMessages = true;
  updateTabListeners();
  try {
    await updateChatStatus(message["chatMessage"]);
    if (config.playChatAlert) {
      const alert = new Audio("https://deviceconsole.securly.com/sound/chat.wav");
      await alert.play();
    }
  } catch (error) {
    console.log("Failed to update chat status on incoming message");
  }
}

async function actionClassSession(message) {
  const sessionStateNotChanged = config.sessionId === (message.sessionId ?? null);
  const hadActiveObservations = config.isObservationActive;

  config.updateClassSessionState(message);

  await updateIconAndTitle(config.activeClassNames);

  if (message["showNotifications"] && hadActiveObservations !== config.isObservationActive) {
    if (config.isObservationActive) {
      showNotification(NOTIFICATION_SESSION_ID, "Class session is active",
          "Your device could be monitored and remotely managed by a teacher");
    } else {
      showNotification(NOTIFICATION_SESSION_ID, "No active class session",
          "Your device is not monitored and cannot be remotely managed by a teacher");
    }
  }

  if (sessionStateNotChanged) {
    return;
  }

  if (config.isObservationActive) {
    await logCurrentTabUrl();
  } else {
    await sendLoggedUrls();
  }

  if (config.shareScreenHandler) {
    await stopSharingScreen();
  }

  closeSharedScreenTab();

  if (config.closeTabsTimeout != null) {
    clearTimeout(config.closeTabsTimeout);
    config.closeTabsTimeout = null;
  }

  config.isHandRaised = false;
  await iconManager.clearRaiseHandIcon();
  updatePopup(message["premium"] && config.isClassSessionActive);
  updateTabListeners();
  updateMessageListener(config.isClassSessionActive);
  updateIdleListeners(message["idleTimeout"]);
  await updateChatStatus();
  await updateLockStatus();
  if (message["closeTabs"]) {
    const closeTabsWaitSeconds = parseInt(message["closeTabsWaitSeconds"]);
    if (typeof closeTabsWaitSeconds === "number" && closeTabsWaitSeconds > 0) {
      await warnAboutTabsClose(closeTabsWaitSeconds);
      config.closeTabsTimeout = setTimeout(async function () {
        console.log("Close tabs on session start after timeout");
        await closeTabs(await getChromeTabs({}), !config.isChromeBook);
        config.closeTabsTimeout = null;
      }, closeTabsWaitSeconds * 1000);
    } else {
      console.log("Close tabs on session start");
      await closeTabs(await getChromeTabs({}), !config.isChromeBook);
    }
  } else if (config.maxOpenTabs > 0) {
    const openedTabs = await getChromeTabs({});
    if (openedTabs.length > config.maxOpenTabs) {
      await closeTabs(openedTabs.slice(0, config.maxOpenTabs), !config.isChromeBook);
    }
  }

  config.conferenceUrl = null;

  if (config.maximizeFocusedWindow) {
    const window = await getFocusedWindow();
    if (window) {
      try {
        await updateWindow(window.id, {state: "maximized"});
      } catch(error) {
        console.log("Cannot maximize window: " + error);
      }
    }
  }
  updateWindowListeners();
}

async function actionClassSessionSettingsUpdate(message) {
  config.canRaiseHand = !!message["allowHandRaise"];
  config.isHandRaised = false;
  config.canStartChat = !!message["canStartChat"];
  config.playChatAlert = !!message["playChatAlertToStudent"];
  updateIconAndTitle(config.activeClassNames);
}

async function stopSharingScreen() {
  clearInterval(config.shareScreenHandler);
  config.capturedScreen = null;
  config.shareScreenHandler = null;
  await iconManager.noShareScreenIcon();
  showNotification(NOTIFICATION_SCREEN_SHARING_ID,
      "Screen sharing ended", "Your teacher has stopped sharing your screen");
}

async function logCurrentTabUrl() {
  let tabs = await getChromeTabs({lastFocusedWindow: true, active: true});
  if (!tabs || !tabs.length > 0) {
    tabs = await getChromeTabs({active: true});
    if (!tabs || !tabs[0] || !tabs[0].url) {
      return;
    }
  }
  const tab = tabs[0];
  if (!tab.url || tab.url.indexOf("chrome-extension") !== -1) {
    return;
  }
  urlStorage.saveUrl(new Url(tab.url, tab.title));
}

async function actionClearRaisedHand() {
  config.isHandRaised = false;
  iconManager.clearRaiseHandIcon();
}

async function actionConference(message) {
  const conferenceUrl = message["url"];
  const lockToSession = message["lockToSession"];
  if (!conferenceUrl && config.conferenceUrl !== null) {
    await config.clearWhitelist();
    updateTabListeners();
    await updateLockStatus();
    config.conferenceUrl = null;
    return;
  }
  if (config.conferenceUrl !== conferenceUrl) {
    config.conferenceUrl = conferenceUrl;
  }
  try {
    if (config.maxOpenTabs > 0) {
      const openedTabs = await getChromeTabs({});
      if (openedTabs && openedTabs.length >= config.maxOpenTabs) {
        config.additionalOpenTabs = openedTabs.length - config.maxOpenTabs + 1;
      }
    }
    await openNewTab({url: conferenceUrl});
    if (lockToSession) {
      const whitelist = [escapeRegex(conferenceUrl)];
      await config.saveBlockedInfo(null, PARAM_MODE_NONE) // Unlock screen if locked
      await config.saveWhitelist(whitelist);
      updateTabListeners();
      await updateLockStatus();
    }
  } catch (error) {
    console.log("Cannot open tab for conference. Error=" + error);
  }
}

function escapeRegex(string) {
  return string.replace(/[/\-\\^$*+?.()|[\]{}]/g, '\\$&');
}

async function actionGetTabs(message) {
  let activeTab = null;
  const activeTabs = await getChromeTabs({lastFocusedWindow: true, active: true});
  if (activeTabs.length > 0) {
    activeTab = activeTabs[0];
  }

  const tabs = await getChromeTabs({});
  console.log("Got " + tabs.length + " tabs");
  let tabsArray = [];
  let activeTabIndex = -1;
  tabs.forEach(function (tab, index) {
    const t = {
      id: tab.id,
      url: tab.url,
      title: tab.title
    };
    if (activeTab != null && tab.id === activeTab.id) {
      activeTabIndex = index;
    }
    tabsArray.push(t);
  });
  if (activeTabIndex !== -1) {
    // Move active tab to the first position in array
    tabsArray.splice(0, 0, tabsArray.splice(activeTabIndex, 1)[0]);
  }
  router.sendCommand({
    isAppListRequested: false,
    response: message["requestType"],
    tabs: tabsArray,
    userId: message["userId"]
  });
}

async function actionLockScreen(message) {
  console.log('Lock screen requested and confirmed');
  await config.clearWhitelist() // Unlock site if locked
  await config.saveBlockedInfo(message["screenBlockMessage"], PARAM_MODE_BLOCK);
  updateTabListeners();
  updateWindowListeners();
  try {
    config.blockWindowId = await openLockWindow();
    await updateWindowFullscreen(config.blockWindowId)
  } catch (error) {
    console.log("Cannot create lock window: " + error);
  }
  await updateLockStatus();
}

async function actionUnlock() {
  console.log('Unlock requested and confirmed');
  await config.saveBlockedInfo(null, PARAM_MODE_NONE);
  await config.clearWhitelist();
  config.canvasAssignmentIds = [];
  updateTabListeners();
  updateWindowListeners();
  if (config.blockWindowId !== 0) {
    try {
      await removeLockWindow(config.blockWindowId);
    } catch (error) {
      console.log("Error while closing block window: " + error);
    }
  }
  await updateLockStatus();
}

async function actionTeacherMessage(message) {
  config.announce = message["teacherMessage"];
  config.teacherName = message["teacherName"];
  config.teacherId = message["teacherId"];
  updateTabListeners();
  await updateLockStatus();
  router.sendCommand(createAnnouncementResponse(false));
}

async function actionBlockingPlan(message) {
  console.log("Got blocking plan");
  const orgBlocklist = message["orgBlocklist"];
  const customBlocklist = message["blockingPlanUrls"];
  const customBlocklistName = message["blockingPlanName"];
  const blockType = message["blockType"];
  await config.clearWhitelist();
  await config.saveOrgBlocklist(orgBlocklist);
  await config.saveBlockingPlan(customBlocklist, customBlocklistName, blockType);
  updateTabListeners();
  await updateLockStatus(false)
}

async function actionOpenSite(message) {
  console.log("Got open site command");
  const urls = message["urls"];
  const windows = await getWindows();
  if (!windows || windows.length === 0) {
    await createWindow(urls);
  } else {
    await openSites(urls);
  }
}

async function actionRequestShareScreen(message) {
  if (message["deviceId"]) {
    console.log("Got screen share request");
    updateTabListeners();
    const requestScreenShareMessage = {
      command: "requestShareScreen",
      userId: message["userId"],
      deviceId: message["deviceId"],
      lock: message["lock"]
    };
    const tabs = await getChromeTabs({});
    for (const tab of tabs) {
      if (typeof tab.id === "number") {
        try {
          await sendCommandToTab(tab.id, requestScreenShareMessage);
        } catch (error) {
          console.log("Error while requesting screen share: " + error);
        }
      }
    }
  } else {
    await stopSharingScreen();
  }
}

async function actionSiteLock(message) {
  console.log("Got site lock command");
  await config.saveBlockedInfo(null, PARAM_MODE_NONE); // Unlock screen if locked
  await config.saveWhitelist(message["whitelistPatterns"]);
  config.lockedToCourseWorkResources = !!message["courseWorkResources"];
  if (config.lockedToCourseWorkResources) {
    config.canvasAssignmentIds = extractCanvasAssignmentIds(message["urls"]);
  }
  updateTabListeners();
  await siteLock(message["urls"], message["closeTabs"], message["notOpenTabs"]);
}

async function checkForUpgrade() {
  return new Promise(async (resolve) => {
    console.log("Needs update check. Current version=" + VERSION);
    if (config.updateCheckDate.getTime() < (new Date()).getTime()) {
      console.log("Checking for extension update");
      const nextCheckDate = new Date();
      const delayMinutes = 10;
      nextCheckDate.setTime(nextCheckDate.getTime() + delayMinutes * 60 * 1000); // 10 minutes
      await config.saveUpdateCheckDate(nextCheckDate);
      chrome.runtime.requestUpdateCheck(async status => {
        console.log("Update check status: " + status);
        switch (status) {
          case UPDATE_STATUS_AVAILABLE:
            console.log("Extension update available, will reload");
            chrome.runtime.reload();
            break;
          case UPDATE_STATUS_THROTTLED:
            const extendedDate = new Date();
            extendedDate.setTime(extendedDate.getTime() + 60 * 60 * 1000); // 1 hour
            console.log("Update check is throttled. Next check time is " + extendedDate);
            await config.saveUpdateCheckDate(extendedDate);
            processExtensionUpgradeError(60);
            break;
          default:
            processExtensionUpgradeError(delayMinutes);
        }
      });
    } else {
      console.log("Next update check time is " + config.updateCheckDate)
      processExtensionUpgradeError();
    }
    resolve();
  });
}

function processExtensionUpgradeError(delayMinutes) {
  if (!delayMinutes) {
    delayMinutes = 5;
  }
  chrome.alarms.create(ALARM_RESTART_APP, {delayInMinutes: delayMinutes});
  console.log("Schedule app restart in " + delayMinutes + " minutes");
}
